package JavaBaseClassLibrary;

class nullPointerTest
{
	private String pointer;
	void p()
	{
		System.out.println(pointer);
	}
}

public class hashCodeTest
{
	private int a;
	private double b;
	private String c;
	
	public static void main(String[] args)
	{
		System.out.println(new hashCodeTest().hashCode());
		System.out.println(new hashCodeTest().hashCode());
		/*上面两行，如果定义hashCodeTest类的equals()方法返回true的要求是 a,b,c里存储的变量相等，这样就必须重写hashCode()方法
		 *因为hashCode()定义中有一条就是若equals()返回true，则hashCode()返回的结果得相等。所以一般重写equals的话也要重写hashCode()方法
		 */
		
		new nullPointerTest().p();//默认为null，不会报错空指针。 想一想为什么？
	}
}
/*
http://blog.csdn.net/zhangyuan19880606/article/details/51240372  下面那段更精彩!!!
HashCode

然后讲下什么是HashCode，总结几个关键点：

1、HashCode的存在主要是为了查找的快捷性，HashCode是用来在散列存储结构中确定对象的存储地址的

2、如果两个对象equals相等，那么这两个对象的HashCode一定也相同

3、如果对象的equals方法被重写，那么对象的HashCode方法也尽量重写

4、如果两个对象的HashCode相同，不代表两个对象就相同，只能说明这两个对象在散列存储结构中，存放于同一个位置

HashCode有什么用

回到最关键的问题，HashCode有什么用？不妨举个例子：

1、假设内存中有0 1 2 3 4 5 6 7 8这8个位置，如果我有个字段叫做ID，那么我要把这个字段存放在以上8个位置之一，如果不用HashCode而任意存放，那么当查找时就需要到8个位置中去挨个查找

2、使用HashCode则效率会快很多，把ID的HashCode%8，然后把ID存放在取得余数的那个位置，然后每次查找该类的时候都可以通过ID的HashCode%8求余数直接找到存放的位置了

3、如果ID的HashCode%8算出来的位置上本身已经有数据了怎么办？这就取决于算法的实现了，比如ThreadLocal中的做法就是从算出来的位置向后查找第一个为空的位置，放置数据；HashMap的做法就是通过链式结构连起来。反正，只要保证放的时候和取的时候的算法一致就行了。

4、如果ID的HashCode%8相等怎么办（这种对应的是第三点说的链式结构的场景）？这时候就需要定义equals了。先通过HashCode%8来判断类在哪一个位置，再通过equals来在这个位置上寻找需要的类。对比两个类的时候也差不多，先通过HashCode比较，假如HashCode相等再判断equals。如果两个类的HashCode都不相同，那么这两个类必定是不同的。

举个实际的例子Set。我们知道Set里面的元素是不可以重复的，那么如何做到？Set是根据equals()方法来判断两个元素是否相等的。比方说Set里面已经有1000个元素了，那么第1001个元素进来的时候，最多可能调用1000次equals方法，如果equals方法写得复杂，对比的东西特别多，那么效率会大大降低。使用HashCode就不一样了，比方说HashSet，底层是基于HashMap实现的，先通过HashCode取一个模，这样一下子就固定到某个位置了，如果这个位置上没有元素，那么就可以肯定HashSet中必定没有和新添加的元素equals的元素，就可以直接存放了，都不需要比较；如果这个位置上有元素了，逐一比较，比较的时候先比较HashCode，HashCode都不同接下去都不用比了，肯定不一样，HashCode相等，再equals比较，没有相同的元素就存，有相同的元素就不存。如果原来的Set里面有相同的元素，只要HashCode的生成方式定义得好（不重复），不管Set里面原来有多少元素，只需要执行一次的equals就可以了。这样一来，实际调用equals方法的次数大大降低，提高了效率。

为什么重写Object的equals(Object obj)方法尽量要重写Object的hashCode()方法

我们在重写Object的equals(Object obj)方法的时候，应该尽量重写hashCode()方法，这是有原因的，下面详细解释下：

复制代码
 1 public class HashCodeClass
 2 {
 3     private String str0;
 4     private double dou0;
 5     private int       int0;
 6     
 7     public boolean equals(Object obj)
 8     {
 9         if (obj instanceof HashCodeClass)
10         {
11             HashCodeClass hcc = (HashCodeClass)obj;
12             if (hcc.str0.equals(this.str0) && 
13                 hcc.dou0 == this.dou0 &&
14                 hcc.int0 == this.int0)
15             {
16                 return true;
17             }
18             return false;
19         }
20         return false;
21     }
22 }
复制代码
复制代码
 1 public class TestMain
 2 {
 3     public static void main(String[] args)
 4     {
 5         System.out.println(new HashCodeClass().hashCode());
 6         System.out.println(new HashCodeClass().hashCode());
 7         System.out.println(new HashCodeClass().hashCode());
 8         System.out.println(new HashCodeClass().hashCode());
 9         System.out.println(new HashCodeClass().hashCode());
10         System.out.println(new HashCodeClass().hashCode());
11     }
12 }
复制代码
打印出来的值是：

1901116749
1807500377
355165777
1414159026
1569228633
778966024
我们希望两个HashCodeClass类equals的前提是两个HashCodeClass的str0、dou0、int0分别相等。OK，那么这个类不重写hashCode()方法是有问题的。

现在我的HashCodeClass都没有赋初值，那么这6个HashCodeClass应该是全部equals的。如果以HashSet为例，HashSet内部的HashMap的table本身的大小是16，那么6个HashCode对16取模分别为13、9、1、2、9、8。第一个放入table[13]的位置、第二个放入table[9]的位置、第三个放入table[1]的位置。。。但是明明是全部equals的6个HashCodeClass，怎么能这么做呢？HashSet本身要求的就是equals的对象不重复，现在6个equals的对象在集合中却有5份（因为有两个计算出来的模都是9）。

那么我们该怎么做呢？重写hashCode方法，根据str0、dou0、int0搞一个算法生成一个尽量唯一的hashCode，这样就保证了str0、dou0、int0都相等的两个HashCodeClass它们的HashCode是相等的，这就是重写equals方法必须尽量要重写hashCode方法的原因。看下JDK中的一些类，都有这么做：

Integer的

复制代码
 1 public int hashCode() {
 2     return value;
 3     }
 4 
 5 public boolean equals(Object obj) {
 6     if (obj instanceof Integer) {
 7         return value == ((Integer)obj).intValue();
 8     }
 9     return false;
10     }
*/

/*
http://blog.csdn.net/baidu_31657889/article/details/52298367	写的很精彩!!!

HashCode定义

 

（1）HashCode的存在主要是用于查找的快捷性，如Hashtable，HashMap等，HashCode是用来在散列存储结构中确定对象的存储地址的；

（2）如果两个对象相同， equals方法一定返回true，并且这两个对象的HashCode一定相同；

（3）如果对象的equals方法被重写，那么对象的HashCode也尽量重写，并且产生HashCode使用的对象，一定要和equals方法中使用的一致，否则就会违反上面提到的第2点；

（4）两个对象的HashCode相同，并不一定表示两个对象就相同，也就是equals方法不一定返回true，只能够说明这两个对象在散列存储结构中，如Hashtable，他们存放在同一个篮子里。

 

HashCode作用

 

Java中的集合（Collection）有两类，一类是List，再有一类是Set。前者集合内的元素是有序的，元素可以重复；后者元素无序，但元素不可重复。 equals方法可用于保证元素不重复，但是，如果每增加一个元素就检查一次，如果集合中现在已经有1000个元素，那么第1001个元素加入集合时，就要调用1000次equals方法。这显然会大大降低效率。 

于是，Java采用了哈希表的原理。

 

哈希算法也称为散列算法，是将数据依特定算法直接指定到一个地址上。

这样一来，当集合要添加新的元素时，先调用这个元素的HashCode方法，就一下子能定位到它应该放置的物理位置上。

（1）如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了；

（2）如果这个位置上已经有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存了；

（3）不相同的话，也就是发生了Hash key相同导致冲突的情况，那么就在这个Hash key的地方产生一个链表，将所有产生相同HashCode的对象放到这个单链表上去，串在一起（很少出现）。这样一来实际调用equals方法的次数就大大降低了，几乎只需要一两次。 

 

如何理解HashCode的作用：

从Object角度看，JVM每new一个Object，它都会将这个Object丢到一个Hash表中去，这样的话，下次做Object的比较或者取这个对象的时候（读取过程），它会根据对象的HashCode再从Hash表中取这个对象。这样做的目的是提高取对象的效率。若HashCode相同再去调用equal。


HashCode实践

 

HashCode是用于查找使用的，而equals是用于比较两个对象的是否相等的。

（1）例如内存中有这样的位置 ：

0  1  2  3  4  5  6  7    

而我有个类，这个类有个字段叫ID，我要把这个类存放在以上8个位置之一，如果不用HashCode而任意存放，那么当查找时就需要到这八个位置里挨个去找，或者用二分法一类的算法。  

但如果用HashCode那就会使效率提高很多。  定义我们的HashCode为ID％8，比如我们的ID为9，9除8的余数为1，那么我们就把该类存在1这个位置，如果ID是13，求得的余数是5，那么我们就把该类放在5这个位置。依此类推。  

（2）但是如果两个类有相同的HashCode，例如9除以8和17除以8的余数都是1，也就是说，我们先通过 HashCode来判断两个类是否存放某个桶里，但这个桶里可能有很多类，那么我们就需要再通过 equals 在这个桶里找到我们要的类。  



请看下面这个例子 ：


[java] view plain copy
public class HashTest {    
    private int i;    
    
    public int getI() {    
        return i;    
    }    
    
    public void setI(int i) {    
        this.i = i;    
    }    
    
    public int hashCode() {    
        return i % 10;    
    }    
    
    public final static void main(String[] args) {    
        HashTest a = new HashTest();    
        HashTest b = new HashTest();    
        a.setI(1);    
        b.setI(1);    
        Set<HashTest> set = new HashSet<HashTest>();    
        set.add(a);    
        set.add(b);    
        System.out.println(a.hashCode() == b.hashCode());    
        System.out.println(a.equals(b));    
        System.out.println(set);    
    }    
}    

输出结果为：

true  
false  
[HashTest@1, HashTest@1] <span style="font-family: Arial, Helvetica, sans-serif;">  </span>  
以上这个示例，我们只是重写了HashCode方法，从上面的结果可以看出，虽然两个对象的HashCode相等，但是实际上两个对象并不是相等，因为我们没有重写equals方法，那么就会调用Object默认的equals方法，显示这是两个不同的对象。

这里我们将生成的对象放到了HashSet中，而HashSet中只能够存放唯一的对象，也就是相同的（适用于equals方法）的对象只会存放一个，但是这里实际上是两个对象a,b都被放到了HashSet中，这样HashSet就失去了他本身的意义了。

下面我们继续重写equals方法：

[java] view plain copy
public class HashTest {    
    private int i;    
    
    public int getI() {    
        return i;    
    }    
    
    public void setI(int i) {    
        this.i = i;    
    }    
    
    public boolean equals(Object object) {    
        if (object == null) {    
            return false;    
        }    
        if (object == this) {    
            return true;    
        }    
        if (!(object instanceof HashTest)) {    
            return false;    
        }    
        HashTest other = (HashTest) object;    
        if (other.getI() == this.getI()) {    
            return true;    
        }    
        return false;    
    }  
    
    public int hashCode() {    
        return i % 10;    
    }    
    
    public final static void main(String[] args) {    
        HashTest a = new HashTest();    
        HashTest b = new HashTest();    
        a.setI(1);    
        b.setI(1);    
        Set<HashTest> set = new HashSet<HashTest>();    
        set.add(a);    
        set.add(b);    
        System.out.println(a.hashCode() == b.hashCode());    
        System.out.println(a.equals(b));    
        System.out.println(set);    
    }    
}    

输出结果如下所示。
从结果我们可以看出，现在两个对象就完全相等了，HashSet中也只存放了一份对象。

true  
true  
[HashTest@1]  
 */
