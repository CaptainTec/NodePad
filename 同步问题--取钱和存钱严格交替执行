package moreThread;
//测试两类线程：一个存钱，一个取钱。两者必须交互进行!!!
class Account
{
	private String accountNo;
	private double balance;
	private boolean flag = false;
	
	public Account() {}
	public Account(String accountNo, double balance)
	{
		this.accountNo = accountNo;
		this.balance = balance;
	}
	//省略accountNo的setter getter方法
	
	public synchronized void draw(double money)//取钱
	{
		try
		{
			if(flag==false)
				wait();
			else
			{
				System.out.println(Thread.currentThread().getName() + " 取钱 " + money);
				balance -= money;
				System.out.println("账户余额为 : " + balance);
				flag = false;
				notifyAll();
			}
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
	public synchronized void deposit(double money)//存钱
	{
		try
		{
			if(flag==true)
				wait();
			else
			{
				System.out.println(Thread.currentThread().getName() + " 存钱 " + money);
				balance += money;
				System.out.println("账户余额为 : " + balance);
				flag = true;
				notify();//随机唤醒一个进程
			}
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
}

class DrawThread extends Thread
{
	private Account account;
	private double money;
	
	public DrawThread(String name, Account account, double money)
	{
		super(name);
		this.account = account;
		this.money = money;
	}
	
	public void run()//循环100次
	{
		for(int i=0; i<100; ++i)
			account.draw(money);
	}
}

class DepositThread extends Thread
{
	private Account account;
	private double money;
	
	public DepositThread(String name, Account account, double money)
	{
		super(name);
		this.account = account;
		this.money = money;
	}
	
	public void run()//循环100次
	{
		for(int i=0; i<100; ++i)
			account.deposit(money);
	}
}


public class ThreadCommunication {
	
	public static void main(String[] args)
	{
		//创建一个账户
		Account acct = new Account("Jinyuzhen", 0);
		new DrawThread("取钱者", acct, 666).start();
//		new DepositThread("存钱者甲", acct, 666).start();
		new DepositThread("存钱者乙", acct, 666).start();
		new DepositThread("存钱者丙", acct, 666).start();
	}

}
